import { rateLimitConfigs, withRateLimit } from '@/lib/rate-limit'
import { filterOrderData, getSecurityHeaders } from '@/lib/response-filter'
import { OrderInput } from '@/types/api'
import { NextRequest, NextResponse } from 'next/server'
import { getPayload } from 'payload'
import config from '@/payload.config'
import { requireAdminOrManager } from '@/lib/auth'

type PayloadError = Error & { status?: number }

// POST /api/public/orders - Create new order (public with rate limiting)
export const POST = withRateLimit(rateLimitConfigs.strict, async (request: NextRequest) => {
  console.log('\x1b[35m[Orders API] Processing order creation request\x1b[0m')
  try {
    const orderData: OrderInput = await request.json()
    console.log(
      '\x1b[33m[Orders API] Received order data:\x1b[0m',
      JSON.stringify(orderData, null, 2),
    )

    // Validate required fields
    if (!orderData.customer?.fullName || !orderData.customer?.email || !orderData.customer?.phone) {
      return NextResponse.json(
        { success: false, error: 'Customer information is required' },
        { status: 400, headers: getSecurityHeaders() },
      )
    }

    if (!orderData.items || orderData.items.length === 0) {
      return NextResponse.json(
        { success: false, error: 'Order items are required' },
        { status: 400, headers: getSecurityHeaders() },
      )
    }

    const payload = await getPayload({ config })

    // Create or update customer first
    let customer
    try {
      const existingCustomer = await payload.find({
        collection: 'customers',
        where: {
          email: { equals: orderData.customer.email },
        },
        limit: 1,
      })
      console.log('[Orders API] Customer lookup result:', existingCustomer.docs)

      if (existingCustomer.docs.length > 0) {
        console.log('[Orders API] Updating existing customer:', existingCustomer.docs[0].id)
        customer = await payload.update({
          collection: 'customers',
          id: existingCustomer.docs[0].id,
          data: {
            name: orderData.customer.fullName,
            email: orderData.customer.email,
            primaryPhone: orderData.customer.phone,
            secondaryPhone: orderData.customer.secondaryPhone,
            addresses: orderData.customer.address
              ? [
                  {
                    type: 'home',
                    address: `${orderData.customer.address.street}, ${orderData.customer.address.city}, ${orderData.customer.address.postalCode}, ${orderData.customer.address.province}`,
                    isDefault: true,
                  },
                ]
              : [],
            preferences: {
              communicationMethod: 'whatsapp',
              marketingOptIn: orderData.customer.marketingOptIn || false,
            },
            whatsapp: { isVerified: false },
            status: 'active',
            customerType: 'regular',
          },
        })
        console.log('[Orders API] Customer updated:', customer)
      } else {
        console.log('[Orders API] Creating new customer')
        customer = await payload.create({
          collection: 'customers',
          data: {
            name: orderData.customer.fullName,
            email: orderData.customer.email,
            primaryPhone: orderData.customer.phone,
            secondaryPhone: orderData.customer.secondaryPhone,
            addresses: orderData.customer.address
              ? [
                  {
                    type: 'home',
                    address: `${orderData.customer.address.street}, ${orderData.customer.address.city}, ${orderData.customer.address.postalCode}, ${orderData.customer.address.province}`,
                    isDefault: true,
                  },
                ]
              : [],
            preferences: {
              communicationMethod: 'whatsapp',
              marketingOptIn: orderData.customer.marketingOptIn || false,
            },
            whatsapp: { isVerified: false },
            status: 'active',
            customerType: 'regular',
          },
        })
        console.log('[Orders API] Customer created:', customer)
      }
    } catch (customerError) {
      console.error('\x1b[41m[Orders API] Error creating/updating customer:\x1b[0m', customerError)
      return NextResponse.json(
        {
          success: false,
          error: 'Failed to create customer',
          details: customerError instanceof Error ? customerError.message : String(customerError),
        },
        { status: 500, headers: getSecurityHeaders() },
      )
    }

    // Create order with better error handling
    try {
      console.log(
        '\x1b[33m[Orders API] Creating order with data:\x1b[0m',
        JSON.stringify(orderData, null, 2),
      )

      const order = await payload.create({
        collection: 'orders',
        data: {
          orderNumber: '', // Placeholder, will be auto-generated by hook
          customerName: orderData.customer.fullName,
          customerEmail: orderData.customer.email,
          customerPhone: orderData.customer.phone,
          customerSecondaryPhone: orderData.customer.secondaryPhone,
          deliveryAddress: `${orderData.customer.address.street}, ${orderData.customer.address.city}, ${orderData.customer.address.postalCode}, ${orderData.customer.address.province}`,
          specialInstructions: orderData.specialInstructions,
          orderItems: orderData.items.map((item) => ({
            productId: item.productId || 'unknown',
            productName: item.productName || 'Unknown Product',
            productSku: item.productSku || 'unknown',
            unitPrice: item.unitPrice || 0,
            quantity: item.quantity,
            variantId: item.variantId || 'unknown',
            subtotal: item.subtotal || 0,
          })),
          orderSubtotal: orderData.pricing.subtotal,
          shippingCost: orderData.pricing.shipping || 0,
          discount: 0,
          tax: orderData.pricing.tax || 0, // Add tax field
          orderTotal: orderData.pricing.total,
          orderStatus: 'pending',
          paymentStatus: 'pending',
          paymentMethod: 'cod',
          orderSource: orderData.orderSource || 'website',
          whatsapp: {
            messageSent: false,
            messageTemplate: 'order-confirmation',
          },
        },
      })

      console.log('[Orders API] Order created successfully:', order)

      // --- Post-order: Update product stock (base or variant) ---
      for (const item of orderData.items) {
        try {
          const product = await payload.findByID({
            collection: 'products',
            id: item.productId,
          })
          if (!product) {
            console.error(`[Orders API] Product not found for stock update: ${item.productId}`)
            continue
          }
          // If product has variants, update only the selected variant's inventory
          if (Array.isArray(product.variants) && product.variants.length > 0 && item.variantId) {
            const updatedVariants = product.variants.map((variant) => {
              if (
                (variant.id && variant.id.toString() === item.variantId.toString()) ||
                (variant.sku && variant.sku === item.productSku)
              ) {
                const newInventory = Math.max(0, (variant.inventory || 0) - item.quantity)
                console.log(
                  `[Orders API] Updating variant stock for product ${item.productId}, variant ${item.variantId}: ${variant.inventory} -> ${newInventory}`,
                )
                return { ...variant, inventory: newInventory }
              }
              return variant
            })
            await payload.update({
              collection: 'products',
              id: item.productId,
              data: { variants: updatedVariants },
            })
          } else if (!product.variants || product.variants.length === 0) {
            // No variants: update base stock
            if (typeof product.stock === 'number') {
              const newStock = Math.max(0, product.stock - item.quantity)
              console.log(
                `[Orders API] Updating base stock for product ${item.productId}: ${product.stock} -> ${newStock}`,
              )
              await payload.update({
                collection: 'products',
                id: item.productId,
                data: { stock: newStock },
              })
            } else {
              console.warn(`[Orders API] Product ${item.productId} has no stock field to update.`)
            }
          } else {
            console.warn(
              `[Orders API] Product ${item.productId} has variants but no matching variantId for item.`,
            )
          }
        } catch (err) {
          console.error(`[Orders API] Error updating stock for product ${item.productId}:`, err)
        }
      }

      // Return success immediately
      const responseData = {
        orderId: order.id.toString(),
        orderNumber: order.orderNumber,
        customerId: orderData.customer.email,
        status: order.orderStatus,
        total: order.orderTotal,
        createdAt: order.createdAt,
      }

      console.log('\x1b[32m[Orders API] Order creation completed:\x1b[0m', responseData)

      return NextResponse.json(
        { success: true, data: responseData },
        { headers: getSecurityHeaders() },
      )
    } catch (orderError) {
      console.error('\x1b[41m[Orders API] Error creating order:\x1b[0m', orderError)

      let errorMessage = 'Failed to create order'
      let statusCode = 500

      if (orderError instanceof Error) {
        errorMessage = orderError.message

        // Check if it's a Payload validation error
        if ('status' in orderError && typeof (orderError as PayloadError).status === 'number') {
          statusCode = (orderError as PayloadError).status ?? 500
        }
      }

      return NextResponse.json(
        {
          success: false,
          error: errorMessage,
          ...(process.env.NODE_ENV === 'development' && {
            details: orderError instanceof Error ? orderError.stack : String(orderError),
          }),
        },
        { status: statusCode, headers: getSecurityHeaders() },
      )
    }
  } catch (error) {
    console.error('\x1b[41m[Orders API] General error:\x1b[0m', error)
    return NextResponse.json(
      { success: false, error: 'Invalid request data' },
      { status: 400, headers: getSecurityHeaders() },
    )
  }
})

// GET /api/public/orders - List orders (admin/manager only, with rate limiting)
export const GET = withRateLimit(
  rateLimitConfigs.moderate,
  requireAdminOrManager(async (request: NextRequest, auth) => {
    try {
      const { searchParams } = new URL(request.url)
      const page = parseInt(searchParams.get('page') || '1')
      const limit = parseInt(searchParams.get('limit') || '20')
      const status = searchParams.get('status')
      const customerEmail = searchParams.get('customerEmail')

      const payload = await getPayload({ config })

      // Build where conditions
      type OrderWhereConditions = {
        orderStatus?: { equals: string }
        customerEmail?: { equals: string }
      }

      const whereConditions: OrderWhereConditions = {}

      if (status) {
        whereConditions.orderStatus = { equals: status }
      }

      if (customerEmail && auth?.isAdmin) {
        whereConditions.customerEmail = { equals: customerEmail }
      }

      console.log('\x1b[36m[Orders API] Incoming GET request\x1b[0m')
      console.log('\x1b[36m[Orders API] Query Params:\x1b[0m', {
        page,
        limit,
        status,
        customerEmail,
      })

      const result = await payload.find({
        collection: 'orders',
        where: whereConditions,
        page,
        limit: Math.min(limit, 100),
        sort: '-createdAt',
      })

      console.log(`\x1b[32m[Orders API] DB Query Success\x1b[0m`, {
        total: result.totalDocs,
        page: result.page,
        limit: result.limit,
      })

      const filteredOrders = result.docs
        .map((order) => filterOrderData(order as unknown as Record<string, unknown>, auth!))
        .filter((order) => order !== null)

      return NextResponse.json(
        {
          success: true,
          data: filteredOrders,
          pagination: {
            page: result.page || 1,
            limit: result.limit,
            totalPages: result.totalPages,
            totalDocs: result.totalDocs,
            hasNextPage: result.hasNextPage,
            hasPrevPage: result.hasPrevPage,
          },
        },
        { headers: getSecurityHeaders() },
      )
    } catch (error) {
      console.error('\x1b[41m\x1b[37m[Orders API ERROR]\x1b[0m', error)
      return NextResponse.json(
        {
          success: false,
          error: 'Failed to fetch orders',
          details: error instanceof Error ? error.message : String(error),
        },
        { status: 500, headers: getSecurityHeaders() },
      )
    }
  }),
)
